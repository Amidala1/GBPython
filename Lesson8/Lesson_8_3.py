"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список
только числами. Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список с числами выводится
на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить
соответствующее сообщение. При этом работа скрипта не должна завершаться.
"""


class MyNonNumberException(Exception):

    def __init__(self, item):
        self.item = item

    def __str__(self):
        return f"Введено некорректное значение! {self.item} не является числом."


items_list = []

while True:
    try:
       item = input("Введите число для заполнения списка. Для выхода из программы введите stop: ")
    except KeyboardInterrupt:
        print("\nРабота программы прекращена")
        print("Сформированный список: {}".format(" ".join([str(x) for x in items_list])))
        exit(0)
    else:
        if item.lower() == "stop":
            print("Программа завершена.")
            exit(0)

        try:
            if item.isdigit():
                items_list.append(int(item))
            else:
                raise MyNonNumberException(item)
        except MyNonNumberException as e:
            print(e)









